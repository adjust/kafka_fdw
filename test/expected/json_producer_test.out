\i test/sql/setup.inc
\set ECHO none
CREATE FOREIGN TABLE kafka_test_prod_json (
    part int OPTIONS (partition 'true'),
    offs bigint OPTIONS (offset 'true'),
    some_int int,
    some_text text,
    some_date date,
    some_time timestamp,
    some_array text[]
)
SERVER kafka_server OPTIONS
    (format 'json', topic 'contrib_regress_prod_json', batch_size '3000', buffer_delay '100');
INSERT INTO kafka_test_prod_json(part, some_int, some_text, some_date, some_array)
    VALUES
    (1, 1,'foo bar 1','2017-01-01', array[1,2,3]),
    (1, 2,'foo text 2','2017-01-02', array[[1,2], [3,4]]),
    (1, 3,'foo text 3','2017-01-03', array['test [brackets]', 'test "[brackets]" in quotes']),
    (1, 4,'foo text 4','2017-01-04', NULL),
    (1, 5,'foo text 5','2017-01-05', NULL),
    (1, 6,'foo text 6','2017-01-06', NULL),
    (1, 7,'foo bar 7','2017-01-07', NULL),
    (1, 8,'foo text 8','2017-01-08', NULL),
    (1, 9,'foo text 9','2017-01-09', NULL),
    (1, 10,'foo text 10','2017-01-10', NULL)
RETURNING *;
 part | offs | some_int |  some_text  | some_date  | some_time |                     some_array                      
------+------+----------+-------------+------------+-----------+-----------------------------------------------------
    1 |      |        1 | foo bar 1   | 01-01-2017 |           | {1,2,3}
    1 |      |        2 | foo text 2  | 01-02-2017 |           | {{1,2},{3,4}}
    1 |      |        3 | foo text 3  | 01-03-2017 |           | {"test [brackets]","test \"[brackets]\" in quotes"}
    1 |      |        4 | foo text 4  | 01-04-2017 |           | 
    1 |      |        5 | foo text 5  | 01-05-2017 |           | 
    1 |      |        6 | foo text 6  | 01-06-2017 |           | 
    1 |      |        7 | foo bar 7   | 01-07-2017 |           | 
    1 |      |        8 | foo text 8  | 01-08-2017 |           | 
    1 |      |        9 | foo text 9  | 01-09-2017 |           | 
    1 |      |       10 | foo text 10 | 01-10-2017 |           | 
(10 rows)

-- run some memload
select count(*) from (select json_agg(s) from generate_series(1, 1000000) s) a;
 count 
-------
     1
(1 row)

select count(*) from (select json_agg(s) from generate_series(1, 1000000) s) a;
 count 
-------
     1
(1 row)

select count(*) from (select json_agg(s) from generate_series(1, 1000000) s) a;
 count 
-------
     1
(1 row)

select count(*) from (select json_agg(s) from generate_series(1, 1000000) s) a;
 count 
-------
     1
(1 row)

select count(*) from (select json_agg(s) from generate_series(1, 1000000) s) a;
 count 
-------
     1
(1 row)

select count(*) from (select json_agg(s) from generate_series(1, 1000000) s) a;
 count 
-------
     1
(1 row)

select count(*) from (select json_agg(s) from generate_series(1, 1000000) s) a;
 count 
-------
     1
(1 row)

SELECT * FROM kafka_test_prod_json WHERE offs >= 0 and part=1;
 part | offs | some_int |  some_text  | some_date  | some_time |                     some_array                      
------+------+----------+-------------+------------+-----------+-----------------------------------------------------
    1 |    0 |        1 | foo bar 1   | 01-01-2017 |           | {1,2,3}
    1 |    1 |        2 | foo text 2  | 01-02-2017 |           | {{1,2},{3,4}}
    1 |    2 |        3 | foo text 3  | 01-03-2017 |           | {"test [brackets]","test \"[brackets]\" in quotes"}
    1 |    3 |        4 | foo text 4  | 01-04-2017 |           | 
    1 |    4 |        5 | foo text 5  | 01-05-2017 |           | 
    1 |    5 |        6 | foo text 6  | 01-06-2017 |           | 
    1 |    6 |        7 | foo bar 7   | 01-07-2017 |           | 
    1 |    7 |        8 | foo text 8  | 01-08-2017 |           | 
    1 |    8 |        9 | foo text 9  | 01-09-2017 |           | 
    1 |    9 |       10 | foo text 10 | 01-10-2017 |           | 
(10 rows)

INSERT INTO kafka_test_prod_json(some_int, some_text, some_date, some_time)
SELECT i,
    'It''s some text, that is for number '||i,
    ('2015-01-01'::date + (i || ' minutes')::interval)::date,
    ('2015-01-01'::date + (i || ' minutes')::interval)::timestamp
FROM generate_series(1,1e4::int, 10) i ORDER BY i;
--- check total was inserted
SELECT SUM(count) FROM(
SELECT COUNT(*) FROM kafka_test_prod_json WHERE offs >= 0 and part=0
UNION ALL
SELECT COUNT(*) FROM kafka_test_prod_json WHERE offs >= 0 and part=1
UNION ALL
SELECT COUNT(*) FROM kafka_test_prod_json WHERE offs >= 0 and part=2
UNION ALL
SELECT COUNT(*) FROM kafka_test_prod_json WHERE offs >= 0 and part=3
)t;
 sum  
------
 1010
(1 row)

--- check auto distribution makes sense
SELECT COUNT(*) BETWEEN 150 AND 350 FROM kafka_test_prod_json WHERE offs >= 0 and part=0;
 ?column? 
----------
 t
(1 row)

SELECT COUNT(*) BETWEEN 150 AND 350 FROM kafka_test_prod_json WHERE offs >= 0 and part=1;
 ?column? 
----------
 t
(1 row)

SELECT COUNT(*) BETWEEN 150 AND 350 FROM kafka_test_prod_json WHERE offs >= 0 and part=2;
 ?column? 
----------
 t
(1 row)

SELECT COUNT(*) BETWEEN 150 AND 350 FROM kafka_test_prod_json WHERE offs >= 0 and part=3;
 ?column? 
----------
 t
(1 row)

--- check data is readable
SELECT some_int, some_text, some_date FROM(
(SELECT some_int, some_text, some_date FROM kafka_test_prod_json WHERE offs >= 0 and part=0 AND some_int = 231 LIMIT 1)
UNION ALL
(SELECT some_int, some_text, some_date FROM kafka_test_prod_json WHERE offs >= 0 and part=1 AND some_int = 231 LIMIT 1)
UNION ALL
(SELECT some_int, some_text, some_date FROM kafka_test_prod_json WHERE offs >= 0 and part=2 AND some_int = 231 LIMIT 1)
UNION ALL
(SELECT some_int, some_text, some_date FROM kafka_test_prod_json WHERE offs >= 0 and part=3 AND some_int = 231 LIMIT 1)
)t;
 some_int |               some_text                | some_date  
----------+----------------------------------------+------------
      231 | It's some text, that is for number 231 | 01-01-2015
(1 row)

